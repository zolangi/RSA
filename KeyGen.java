package project2;

import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.OutputStream;
import java.math.BigInteger;
import java.util.Random;

/**
 * @author Zolangi Ramirez
 * @author Phillip Gulegin
 */

public class KeyGen {
	static BigInteger p,q,n,totient;
	
	public static void main(String[] args) {
		Random rnd = new Random();						// random number
		int bitLength = 512;							// recommended bit length for p and q
		p = BigInteger.probablePrime(bitLength, rnd);  	// create p, as a random prime
		q = BigInteger.probablePrime(bitLength, rnd);	// create q, as a random prime
		n = p.multiply(q);								// the size n by p x q 
		System.out.println("p: " + p +"\nq: " + q);
		totient = p.subtract(BigInteger.ONE).multiply(q.subtract(BigInteger.ONE)); // totient function calculated by (p-1)x(q-1) 
		BigInteger e = genE(totient, bitLength, rnd); 	// assign e to value generated by genE()
		BigInteger d = e.modInverse(totient);			// is the inverse of e modulo totient(n)
		
		System.out.println("e: " + e + "\nd: " + d + "\nn: " + n);
		
		try {
			privateKey(d,n);
			publicKey(e,n);
		} catch (IOException e1) {
			e1.printStackTrace();
		}
	} 

	// returns true if the gcd is equal to one, else returns false
	public static boolean gcdIsOne(BigInteger e, BigInteger totient){
		boolean isOne= false;							// boolean to check whether the gcd is one
		
		BigInteger gcd = e.gcd(totient);  				// gcd finds the gcd(e, totient)
				
		if(gcd.compareTo(BigInteger.ONE) == 0)			// checks if gcd is equal to one
			isOne = true;								//if gcd = 1, then set boolean to true
		else
			isOne = false;
				
		return isOne;									// return boolean value
	}
	
	// generates e
	public static BigInteger genE (BigInteger totient, int bitLength, Random rnd){
		BigInteger temp = BigInteger.probablePrime(bitLength, rnd); 	// random prime for temporary use in this method		
		BigInteger e = null;											// instantiate e
		boolean gcd = gcdIsOne(temp, totient);
				
		if((temp.compareTo(BigInteger.ONE) == 1) && temp.compareTo(totient) == -1 && gcd == true ){
			e = temp;
			return e;
		}
		else{
			genE(totient, bitLength, rnd);
		}
		return e;
	}

	
	
	// where I tried to write public key and private key to their respective file
	
	public static void publicKey(BigInteger e, BigInteger n) throws IOException{
		File f = new File("pubkey.rsa");
		try {
			writeBI(e, f);
			
		} catch (FileNotFoundException ex) {
			ex.printStackTrace();
		}
	}
	
	public static void privateKey(BigInteger d, BigInteger n) throws IOException{
		File f = new File("privkey.rsa");
		try{
			writeBI(d, f);
		} catch(FileNotFoundException e){
			e.printStackTrace();
		}
	}
	
	public static void writeBI(BigInteger bi, File f) throws IOException{
		try{
			OutputStream file = new FileOutputStream(f);
			file.write(bi.toByteArray());
			file.flush();
			file.close();
			
		} catch (FileNotFoundException e){
			e.printStackTrace();
		}
		
	}
}
